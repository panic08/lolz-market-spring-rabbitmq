/*
 * This file is generated by jOOQ.
 */
package ru.panic.generatedClasses.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;

import ru.panic.generatedClasses.tables.Replenishments;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReplenishmentsRecord extends UpdatableRecordImpl<ReplenishmentsRecord> implements Record6<Long, Double, Short, Long, Long, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.replenishments.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.replenishments.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.replenishments.amount</code>.
     */
    public void setAmount(Double value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.replenishments.amount</code>.
     */
    public Double getAmount() {
        return (Double) get(1);
    }

    /**
     * Setter for <code>public.replenishments.currency</code>.
     */
    public void setCurrency(Short value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.replenishments.currency</code>.
     */
    public Short getCurrency() {
        return (Short) get(2);
    }

    /**
     * Setter for <code>public.replenishments.timestamp</code>.
     */
    public void setTimestamp(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.replenishments.timestamp</code>.
     */
    public Long getTimestamp() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>public.replenishments.user_id</code>.
     */
    public void setUserId(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.replenishments.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>public.replenishments.username</code>.
     */
    public void setUsername(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.replenishments.username</code>.
     */
    public String getUsername() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Double, Short, Long, Long, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Long, Double, Short, Long, Long, String> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Replenishments.REPLENISHMENTS.ID;
    }

    @Override
    public Field<Double> field2() {
        return Replenishments.REPLENISHMENTS.AMOUNT;
    }

    @Override
    public Field<Short> field3() {
        return Replenishments.REPLENISHMENTS.CURRENCY;
    }

    @Override
    public Field<Long> field4() {
        return Replenishments.REPLENISHMENTS.TIMESTAMP;
    }

    @Override
    public Field<Long> field5() {
        return Replenishments.REPLENISHMENTS.USER_ID;
    }

    @Override
    public Field<String> field6() {
        return Replenishments.REPLENISHMENTS.USERNAME;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Double component2() {
        return getAmount();
    }

    @Override
    public Short component3() {
        return getCurrency();
    }

    @Override
    public Long component4() {
        return getTimestamp();
    }

    @Override
    public Long component5() {
        return getUserId();
    }

    @Override
    public String component6() {
        return getUsername();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Double value2() {
        return getAmount();
    }

    @Override
    public Short value3() {
        return getCurrency();
    }

    @Override
    public Long value4() {
        return getTimestamp();
    }

    @Override
    public Long value5() {
        return getUserId();
    }

    @Override
    public String value6() {
        return getUsername();
    }

    @Override
    public ReplenishmentsRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public ReplenishmentsRecord value2(Double value) {
        setAmount(value);
        return this;
    }

    @Override
    public ReplenishmentsRecord value3(Short value) {
        setCurrency(value);
        return this;
    }

    @Override
    public ReplenishmentsRecord value4(Long value) {
        setTimestamp(value);
        return this;
    }

    @Override
    public ReplenishmentsRecord value5(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public ReplenishmentsRecord value6(String value) {
        setUsername(value);
        return this;
    }

    @Override
    public ReplenishmentsRecord values(Long value1, Double value2, Short value3, Long value4, Long value5, String value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ReplenishmentsRecord
     */
    public ReplenishmentsRecord() {
        super(Replenishments.REPLENISHMENTS);
    }

    /**
     * Create a detached, initialised ReplenishmentsRecord
     */
    public ReplenishmentsRecord(Long id, Double amount, Short currency, Long timestamp, Long userId, String username) {
        super(Replenishments.REPLENISHMENTS);

        setId(id);
        setAmount(amount);
        setCurrency(currency);
        setTimestamp(timestamp);
        setUserId(userId);
        setUsername(username);
        resetChangedOnNotNull();
    }
}
