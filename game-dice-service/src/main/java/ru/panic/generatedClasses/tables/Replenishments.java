/*
 * This file is generated by jOOQ.
 */
package ru.panic.generatedClasses.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.panic.generatedClasses.Keys;
import ru.panic.generatedClasses.Public;
import ru.panic.generatedClasses.tables.records.ReplenishmentsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Replenishments extends TableImpl<ReplenishmentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.replenishments</code>
     */
    public static final Replenishments REPLENISHMENTS = new Replenishments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReplenishmentsRecord> getRecordType() {
        return ReplenishmentsRecord.class;
    }

    /**
     * The column <code>public.replenishments.id</code>.
     */
    public final TableField<ReplenishmentsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.replenishments.amount</code>.
     */
    public final TableField<ReplenishmentsRecord, Double> AMOUNT = createField(DSL.name("amount"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.replenishments.currency</code>.
     */
    public final TableField<ReplenishmentsRecord, Short> CURRENCY = createField(DSL.name("currency"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.replenishments.timestamp</code>.
     */
    public final TableField<ReplenishmentsRecord, Long> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.replenishments.user_id</code>.
     */
    public final TableField<ReplenishmentsRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.replenishments.username</code>.
     */
    public final TableField<ReplenishmentsRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private Replenishments(Name alias, Table<ReplenishmentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Replenishments(Name alias, Table<ReplenishmentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.replenishments</code> table reference
     */
    public Replenishments(String alias) {
        this(DSL.name(alias), REPLENISHMENTS);
    }

    /**
     * Create an aliased <code>public.replenishments</code> table reference
     */
    public Replenishments(Name alias) {
        this(alias, REPLENISHMENTS);
    }

    /**
     * Create a <code>public.replenishments</code> table reference
     */
    public Replenishments() {
        this(DSL.name("replenishments"), null);
    }

    public <O extends Record> Replenishments(Table<O> child, ForeignKey<O, ReplenishmentsRecord> key) {
        super(child, key, REPLENISHMENTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ReplenishmentsRecord, Long> getIdentity() {
        return (Identity<ReplenishmentsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ReplenishmentsRecord> getPrimaryKey() {
        return Keys.REPLENISHMENTS_PKEY;
    }

    @Override
    public List<Check<ReplenishmentsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("replenishments_currency_check"), "(((currency >= 0) AND (currency <= 7)))", true)
        );
    }

    @Override
    public Replenishments as(String alias) {
        return new Replenishments(DSL.name(alias), this);
    }

    @Override
    public Replenishments as(Name alias) {
        return new Replenishments(alias, this);
    }

    @Override
    public Replenishments as(Table<?> alias) {
        return new Replenishments(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Replenishments rename(String name) {
        return new Replenishments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Replenishments rename(Name name) {
        return new Replenishments(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Replenishments rename(Table<?> name) {
        return new Replenishments(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Double, Short, Long, Long, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super Double, ? super Short, ? super Long, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super Double, ? super Short, ? super Long, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
