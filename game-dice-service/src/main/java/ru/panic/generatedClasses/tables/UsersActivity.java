/*
 * This file is generated by jOOQ.
 */
package ru.panic.generatedClasses.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.panic.generatedClasses.Keys;
import ru.panic.generatedClasses.Public;
import ru.panic.generatedClasses.tables.records.UsersActivityRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersActivity extends TableImpl<UsersActivityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.users_activity</code>
     */
    public static final UsersActivity USERS_ACTIVITY = new UsersActivity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersActivityRecord> getRecordType() {
        return UsersActivityRecord.class;
    }

    /**
     * The column <code>public.users_activity.id</code>.
     */
    public final TableField<UsersActivityRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.users_activity.browser_name</code>.
     */
    public final TableField<UsersActivityRecord, String> BROWSER_NAME = createField(DSL.name("browser_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.users_activity.browser_version</code>.
     */
    public final TableField<UsersActivityRecord, String> BROWSER_VERSION = createField(DSL.name("browser_version"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.users_activity.device_name</code>.
     */
    public final TableField<UsersActivityRecord, String> DEVICE_NAME = createField(DSL.name("device_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.users_activity.device_type</code>.
     */
    public final TableField<UsersActivityRecord, String> DEVICE_TYPE = createField(DSL.name("device_type"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.users_activity.operating_system</code>.
     */
    public final TableField<UsersActivityRecord, String> OPERATING_SYSTEM = createField(DSL.name("operating_system"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.users_activity.ip_address</code>.
     */
    public final TableField<UsersActivityRecord, String> IP_ADDRESS = createField(DSL.name("ip_address"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.users_activity.timestamp</code>.
     */
    public final TableField<UsersActivityRecord, Long> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.users_activity.username</code>.
     */
    public final TableField<UsersActivityRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(255), this, "");

    private UsersActivity(Name alias, Table<UsersActivityRecord> aliased) {
        this(alias, aliased, null);
    }

    private UsersActivity(Name alias, Table<UsersActivityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.users_activity</code> table reference
     */
    public UsersActivity(String alias) {
        this(DSL.name(alias), USERS_ACTIVITY);
    }

    /**
     * Create an aliased <code>public.users_activity</code> table reference
     */
    public UsersActivity(Name alias) {
        this(alias, USERS_ACTIVITY);
    }

    /**
     * Create a <code>public.users_activity</code> table reference
     */
    public UsersActivity() {
        this(DSL.name("users_activity"), null);
    }

    public <O extends Record> UsersActivity(Table<O> child, ForeignKey<O, UsersActivityRecord> key) {
        super(child, key, USERS_ACTIVITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<UsersActivityRecord, Long> getIdentity() {
        return (Identity<UsersActivityRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UsersActivityRecord> getPrimaryKey() {
        return Keys.USERS_ACTIVITY_PKEY;
    }

    @Override
    public UsersActivity as(String alias) {
        return new UsersActivity(DSL.name(alias), this);
    }

    @Override
    public UsersActivity as(Name alias) {
        return new UsersActivity(alias, this);
    }

    @Override
    public UsersActivity as(Table<?> alias) {
        return new UsersActivity(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersActivity rename(String name) {
        return new UsersActivity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersActivity rename(Name name) {
        return new UsersActivity(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersActivity rename(Table<?> name) {
        return new UsersActivity(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, String, String, String, String, String, Long, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
