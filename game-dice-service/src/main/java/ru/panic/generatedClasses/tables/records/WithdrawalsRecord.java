/*
 * This file is generated by jOOQ.
 */
package ru.panic.generatedClasses.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;

import ru.panic.generatedClasses.tables.Withdrawals;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WithdrawalsRecord extends UpdatableRecordImpl<WithdrawalsRecord> implements Record9<Long, Double, String, Double, String, Long, Long, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.withdrawals.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.withdrawals.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.withdrawals.amount</code>.
     */
    public void setAmount(Double value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.withdrawals.amount</code>.
     */
    public Double getAmount() {
        return (Double) get(1);
    }

    /**
     * Setter for <code>public.withdrawals.currency</code>.
     */
    public void setCurrency(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.withdrawals.currency</code>.
     */
    public String getCurrency() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.withdrawals.gas</code>.
     */
    public void setGas(Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.withdrawals.gas</code>.
     */
    public Double getGas() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>public.withdrawals.status</code>.
     */
    public void setStatus(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.withdrawals.status</code>.
     */
    public String getStatus() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.withdrawals.timestamp</code>.
     */
    public void setTimestamp(Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.withdrawals.timestamp</code>.
     */
    public Long getTimestamp() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>public.withdrawals.user_id</code>.
     */
    public void setUserId(Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.withdrawals.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>public.withdrawals.username</code>.
     */
    public void setUsername(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.withdrawals.username</code>.
     */
    public String getUsername() {
        return (String) get(7);
    }

    /**
     * Setter for <code>public.withdrawals.wallet_id</code>.
     */
    public void setWalletId(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.withdrawals.wallet_id</code>.
     */
    public String getWalletId() {
        return (String) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Double, String, Double, String, Long, Long, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<Long, Double, String, Double, String, Long, Long, String, String> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Withdrawals.WITHDRAWALS.ID;
    }

    @Override
    public Field<Double> field2() {
        return Withdrawals.WITHDRAWALS.AMOUNT;
    }

    @Override
    public Field<String> field3() {
        return Withdrawals.WITHDRAWALS.CURRENCY;
    }

    @Override
    public Field<Double> field4() {
        return Withdrawals.WITHDRAWALS.GAS;
    }

    @Override
    public Field<String> field5() {
        return Withdrawals.WITHDRAWALS.STATUS;
    }

    @Override
    public Field<Long> field6() {
        return Withdrawals.WITHDRAWALS.TIMESTAMP;
    }

    @Override
    public Field<Long> field7() {
        return Withdrawals.WITHDRAWALS.USER_ID;
    }

    @Override
    public Field<String> field8() {
        return Withdrawals.WITHDRAWALS.USERNAME;
    }

    @Override
    public Field<String> field9() {
        return Withdrawals.WITHDRAWALS.WALLET_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Double component2() {
        return getAmount();
    }

    @Override
    public String component3() {
        return getCurrency();
    }

    @Override
    public Double component4() {
        return getGas();
    }

    @Override
    public String component5() {
        return getStatus();
    }

    @Override
    public Long component6() {
        return getTimestamp();
    }

    @Override
    public Long component7() {
        return getUserId();
    }

    @Override
    public String component8() {
        return getUsername();
    }

    @Override
    public String component9() {
        return getWalletId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Double value2() {
        return getAmount();
    }

    @Override
    public String value3() {
        return getCurrency();
    }

    @Override
    public Double value4() {
        return getGas();
    }

    @Override
    public String value5() {
        return getStatus();
    }

    @Override
    public Long value6() {
        return getTimestamp();
    }

    @Override
    public Long value7() {
        return getUserId();
    }

    @Override
    public String value8() {
        return getUsername();
    }

    @Override
    public String value9() {
        return getWalletId();
    }

    @Override
    public WithdrawalsRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public WithdrawalsRecord value2(Double value) {
        setAmount(value);
        return this;
    }

    @Override
    public WithdrawalsRecord value3(String value) {
        setCurrency(value);
        return this;
    }

    @Override
    public WithdrawalsRecord value4(Double value) {
        setGas(value);
        return this;
    }

    @Override
    public WithdrawalsRecord value5(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public WithdrawalsRecord value6(Long value) {
        setTimestamp(value);
        return this;
    }

    @Override
    public WithdrawalsRecord value7(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public WithdrawalsRecord value8(String value) {
        setUsername(value);
        return this;
    }

    @Override
    public WithdrawalsRecord value9(String value) {
        setWalletId(value);
        return this;
    }

    @Override
    public WithdrawalsRecord values(Long value1, Double value2, String value3, Double value4, String value5, Long value6, Long value7, String value8, String value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached WithdrawalsRecord
     */
    public WithdrawalsRecord() {
        super(Withdrawals.WITHDRAWALS);
    }

    /**
     * Create a detached, initialised WithdrawalsRecord
     */
    public WithdrawalsRecord(Long id, Double amount, String currency, Double gas, String status, Long timestamp, Long userId, String username, String walletId) {
        super(Withdrawals.WITHDRAWALS);

        setId(id);
        setAmount(amount);
        setCurrency(currency);
        setGas(gas);
        setStatus(status);
        setTimestamp(timestamp);
        setUserId(userId);
        setUsername(username);
        setWalletId(walletId);
        resetChangedOnNotNull();
    }
}
